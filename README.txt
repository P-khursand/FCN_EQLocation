1. Settings: File paths, parameters, geographical range, and file paths for labels and images used in the training process are specified.
2. Data loader: The full process of preparing seismic data(waveforms) for use in FCN models is executed. First, functions are defined to read station and earthquake catalog data from CSV files. Then, using the read_seismogram function, the raw waveforms for a specific earthquake are loaded. The process_data function processes these waveforms, which includes setting the sampling rate, detrending, tapering, and trimming the data to a specific time interval. Following this, the make_image function converts the processed waveforms into a three-dimensional array (an image), where each dimension represents a component (E, N, Z) and different stations. This image is then normalized by normalize_image to ensure its values fall within a consistent range. Finally, the location_image function creates another three-dimensional array representing the true earthquake location as a Gaussian function, which can be used as a label for training a model to predict earthquake locations.
3. ModelFCN: This code implements a complete process for training, validating, and evaluating a Fully Convolutional Network (FCN) model for earthquake location. It begins by defining an EarthquakeDataset class and functions to load and split data into training, validation, and testing sets. The FCNloca model architecture is then designed using layers for convolution, ReLU, MaxPool, and Upsample. Finally, the main train_model function manages the training cycle: it initializes the model, the loss function (BCELoss), and the optimizer (Adam). Over a specified number of epochs, it trains the model on the training data, evaluates its performance with the validation data, and reports the final results using the test data.
4. Extraction EQlocation: This code is designed to evaluate the performance of the FCN model in determining earthquake locations. It begins by importing geographical range and grid step parameters from a settings file. Next, it finds the file paths for the true label files (labels) and the model's predicted output files (outputs) within the results folder. It then calculates the dimensions of the grid (number of samples along the X, Y, and Z axes) and creates corresponding vectors for longitude, latitude, and depth. The core of the code is a loop that iterates through each pair of label and output files, finding the true and predicted locations with the highest values. It then calculates the horizontal and vertical errors between these two locations and stores them in separate lists. Finally, it prints the mean and standard deviation of the horizontal and vertical errors and writes detailed error information for each event to a text file.
5. Running test data: Once the preparation process is complete, the input data is saved in the format f[index].tiff (e.g., f0004.tiff, f0016.tiff,f0034.tiff,f0098.tiff....), and their corresponding labels are saved as l[index].tiff (e.g., l0004.tiff, l0016.tiff, l0034.tiff,l0016.tiff34,l0098.tifff..). Within the modelfcn/Data Generator section, the path to these files is specified, and the data is loaded based on a given index from csv file. This setup provides access to each pair of input data and labels for training, validation, and testing purposes.
After the operations are completed, all results are saved with the output(o) format[index].tiff( o0004.tiff,o0016.tiff, o0034.tiff, o0064.tiff, o0098.tiff.